#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: imports

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_nes_create(port_: i64) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_create",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| nes_create(),
    )
}

#[no_mangle]
pub extern "C" fn wire_nes_destroy(port_: i64, pointer: usize) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_destroy",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pointer = pointer.wire2api();
            move |task_callback| Ok(nes_destroy(api_pointer))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_nes_prepare(port_: i64, pointer: usize, rom_data: *mut wire_uint_8_list) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_prepare",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pointer = pointer.wire2api();
            let api_rom_data = rom_data.wire2api();
            move |task_callback| Ok(nes_prepare(api_pointer, api_rom_data))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_nes_next_frame(port_: i64, pointer: usize) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_next_frame",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pointer = pointer.wire2api();
            move |task_callback| nes_next_frame(api_pointer)
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_nes_reset(port_: i64, pointer: usize) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_reset",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pointer = pointer.wire2api();
            move |task_callback| Ok(nes_reset(api_pointer))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_nes_press_button(port_: i64, pointer: usize, button: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_press_button",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pointer = pointer.wire2api();
            let api_button = button.wire2api();
            move |task_callback| Ok(nes_press_button(api_pointer, api_button))
        },
    )
}

#[no_mangle]
pub extern "C" fn wire_nes_release_button(port_: i64, pointer: usize, button: i32) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nes_release_button",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_pointer = pointer.wire2api();
            let api_button = button.wire2api();
            move |task_callback| Ok(nes_release_button(api_pointer, api_button))
        },
    )
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

// Section: wrapper structs

// Section: static checks

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> ZeroCopyBuffer<Vec<u8>> {
        ZeroCopyBuffer(self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<NesButton> for i32 {
    fn wire2api(self) -> NesButton {
        match self {
            0 => NesButton::PowerOff,
            1 => NesButton::Reset,
            2 => NesButton::Select,
            3 => NesButton::Start,
            4 => NesButton::JoyPad1A,
            5 => NesButton::JoyPad1B,
            6 => NesButton::JoyPad1Up,
            7 => NesButton::JoyPad1Down,
            8 => NesButton::JoyPad1Left,
            9 => NesButton::JoyPad1Right,
            10 => NesButton::JoyPad2A,
            11 => NesButton::JoyPad2B,
            12 => NesButton::JoyPad2Up,
            13 => NesButton::JoyPad2Down,
            14 => NesButton::JoyPad2Left,
            15 => NesButton::JoyPad2Right,
            _ => unreachable!("Invalid variant for NesButton: {}", self),
        }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}

// Section: impl IntoDart

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: sync execution mode utility

#[no_mangle]
pub extern "C" fn free_WireSyncReturnStruct(val: support::WireSyncReturnStruct) {
    unsafe {
        let _ = support::vec_from_leak_ptr(val.ptr, val.len);
    }
}
